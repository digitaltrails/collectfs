COLLECTFS - COLLECT FILE SYSTEM
Version 1.0

Copyright 2011, Michael Hamilton
GPL 3.0(GNU General Public License) - see COPYING file

Collectfs is a userspace filesystem that provides add-on trash collection 
for a directory hierarchy.  

WHAT'S IT FOR:

My main intent is to protect a project hierarchy by providing a fairly 
universal no-clobber mechanism:
  - The history of changes is preserved. 
  - Missteps in using rm, mv, cat, etc are non-permanent.
  - It works seamlessly with standard development tools.

Collectfs can be used much like the edit history system in development tools 
like eclipse, but is more universal and doesn't dictate the tool-set.

WHAT IT PROTECTS YOU FROM:

Any file that is overwritten by remove (unlink), move, link, symlink, or 
open-truncate is relocated to a trash directory.  Removed files are 
date-time stamped so that edit history is maintained.

WHAT IT DOESN'T PROTECT YOU FROM:

Any file that is updated in place is not protected.  So it's not going to
protect you from dropping database tables.

It isn't aware of cross file dependencies that some tools may require for
a set of files to consistent and usable.

HOW IT WORKS:

The fuse layer traps the previously mentioned filesystem operations and
renames clobbered files to a trash directory.  The trash directory
duplicates the structure (but no permissions) of the original directory 
to provide some context for recovery.  Using rename is fast requiring
no data to be copied.  Because collectfs relies on using rename, the 
trash directory must reside within the same physical filesystem. 

Usage:
    collectfs rootDir mountPoint
    collectfs -h
E.g.
    mkdir my_project_src
    mkdir my_project
    collectfs my_project_src my_project
    touch my_project/code.c
    rm my_project/code.c
    ls my_project/.trash/
    usermount -u my_project

LIMITATIONS

Collectfs does not currently preserve permissions when duplicating directory
hierarchies.  Directories under the trash folder will be created with the 
current umask.  Because of this, files moved to the trash folder may 
become more accessible to other users than before.

Empty directories aren't protected.  Collectfs is currently aimed at preserving
files and some associated directory context. 

The trash directory is visible within the collectfs, if you perform file
operations such as rm on trashed files inside mounted collectfs, the 
collectfs will simply move them a trash directory inside the trash 
directory (rm -r on the trash folder just results in a trash folder
in the trash folder and a "Directory not empty" error).  Note, if you
can really remove files from the trash by using the real non-fuse
path to the trash folder.

There may be bugs that permanently destroy files.  I've been using collectfs 
to create collectfs.  Other than this, testing has been limited.  As a 
development tool it works for me - I backup my system each day and 
trust collectfs to protect the odd folder hierarchy - you need to assess 
how trust you wish to place in it and what other measures you should take
to protect yourself from any bugs that might be present.

Credits:

http://fuse.sourceforge.net/

http://www.cs.nmsu.edu/~pfeiffer/fuse-tutorial/
Joseph J. Pfeiffer

http://sysdocs.stu.qmul.ac.uk/sysdocs/Comment/FuseUserFileSystems/
John Cobb & Radek Podgorny
